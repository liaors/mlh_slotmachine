package com.maoye.mlh_slotmachine.view.searchgoodsactivity;import android.content.Context;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.view.View;import android.view.inputmethod.InputMethodManager;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.google.gson.Gson;import com.maoye.mlh_slotmachine.R;import com.maoye.mlh_slotmachine.adapter.RecyclerGoodsAdapter;import com.maoye.mlh_slotmachine.bean.BaseResult;import com.maoye.mlh_slotmachine.bean.BrandGoodsBean;import com.maoye.mlh_slotmachine.bean.CacheBean;import com.maoye.mlh_slotmachine.bean.GoodsBean;import com.maoye.mlh_slotmachine.mvp.MVPBaseActivity;import com.maoye.mlh_slotmachine.util.Toast;import com.maoye.mlh_slotmachine.util.httputil.cache.CacheUtil;import com.maoye.mlh_slotmachine.view.goodsactivity.GoodsVH;import com.maoye.mlh_slotmachine.widget.banner.BannerConfig;import com.maoye.mlh_slotmachine.widget.banner.ViewBanner;import com.maoye.mlh_slotmachine.widget.banner.transformer.BackgroundToForegroundTransformer;import org.json.JSONArray;import org.json.JSONException;import java.util.ArrayList;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;public class SearchgoodsActivity extends MVPBaseActivity<SearchgoodsContract.View, SearchgoodsPresenter> implements SearchgoodsContract.View {    @BindView(R.id.goood_name_et)    EditText gooodNameEt;    @BindView(R.id.delete_img)    ImageView deleteImg;    @BindView(R.id.search_bt)    Button searchBt;    @BindView(R.id.nodata_hint_tv)    TextView nodataHintTv;    @BindView(R.id.hint_layout)    LinearLayout hintLayout;    @BindView(R.id.title_tv)    TextView titleTv;    @BindView(R.id.banner)    ViewBanner banner;    @BindView(R.id.recycler)    RecyclerView recycler;    @BindView(R.id.back)    ImageView back;    public static final String NO_DATA_TITLE = "您可能会喜欢";    public static final String NO_DATA_HINT_FORMAT = "Sorry! “%s”暂无搜索内容\n" +            "为您推荐了相关商品，您逛逛";    public static final String GOODS_NUM_FORMAT = "共找到%s个商品";    @BindView(R.id.leftpage_img)    ImageView leftpageImg;    @BindView(R.id.rightpage_img)    ImageView rightpageImg;    @BindView(R.id.banner_rl)    RelativeLayout bannerRl;    @BindView(R.id.recycler_rl)    RelativeLayout recyclerRl;    private RecyclerGoodsAdapter adapter;    private List<GoodsBean> defaultList = new ArrayList<>();    private List<List<GoodsBean>> lists;    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_search_goods);        ButterKnife.bind(this);        initData();    }    private void initData() {        gooodNameEt.addTextChangedListener(textWatcher);        adapter = new RecyclerGoodsAdapter();        recycler.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));        recycler.setAdapter(adapter);        banner.setViewLoader(new GoodsVH());        banner.setBannerStyle(BannerConfig.NOT_INDICATOR);        // banner.setPageTransformer(true, new RotateUpTransformer());//斜翻页        // banner.setPageTransformer(true, new ZoomOutTranformer());//渐变        // banner.setPageTransformer(true, new ZoomOutSlideTransformer());//沉浮        //banner.setPageTransformer(true, new ZoomInTransformer());//缩放（中间）        //banner.setPageTransformer(true, new TabletTransformer());//上翻页        //  banner.setPageTransformer(true, new StackTransformer());//覆盖        // banner.setPageTransformer(true, new ScaleInOutTransformer());//缩放        // banner.setPageTransformer(true, new ForegroundToBackgroundTransformer());        banner.setPageTransformer(true, new BackgroundToForegroundTransformer());        banner.start();        String query = CacheUtil.query(CacheUtil.DEFAULT_GOODS);        if (query != null) {            banner.setVisibility(View.VISIBLE);            bannerRl.setVisibility(View.VISIBLE);            recycler.setVisibility(View.GONE);            recyclerRl.setVisibility(View.GONE);            hintLayout.setVisibility(View.GONE);            try {                JSONArray jsonArray = new JSONArray(query);                for (int i = 0; i < jsonArray.length(); i++) {                    defaultList.add(new Gson().fromJson(jsonArray.get(i).toString(), GoodsBean.class));                }                List<List<GoodsBean>> lists = mPresenter.handerGoodsData(defaultList);                banner.update(lists);            } catch (JSONException e) {                e.printStackTrace();            }        }        mPresenter.defaultGoods();    }    TextWatcher textWatcher = new TextWatcher() {        @Override        public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {        }        @Override        public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {        }        @Override        public void afterTextChanged(Editable editable) {            if (!TextUtils.isEmpty(editable)) {                deleteImg.setVisibility(View.VISIBLE);            } else {                deleteImg.setVisibility(View.GONE);            }        }    };    /**     * 默认商品     *     * @param o     */    @Override    public void onSuccess(Object o) {        BaseResult<List<GoodsBean>> data = (BaseResult<List<GoodsBean>>) o;        defaultList = data.getData();        banner.setVisibility(View.VISIBLE);        bannerRl.setVisibility(View.VISIBLE);        recycler.setVisibility(View.GONE);        recyclerRl.setVisibility(View.GONE);        hintLayout.setVisibility(View.GONE);        lists = mPresenter.handerGoodsData(defaultList);        banner.update(lists);        if (lists.size() > 1) {            rightpageImg.setVisibility(View.VISIBLE);            leftpageImg.setVisibility(View.VISIBLE);        } else {            rightpageImg.setVisibility(View.GONE);            leftpageImg.setVisibility(View.GONE);        }        ArrayList<GoodsBean> arrayList = new ArrayList<>();        for (GoodsBean bean : defaultList) {            arrayList.add(bean);        }        String json = new Gson().toJson(arrayList).toString();        CacheBean bean = new CacheBean();        bean.setJsonUrl(json);        bean.setName(CacheUtil.DEFAULT_GOODS);        CacheUtil.put(bean);    }    @Override    public void onFail(Throwable throwable) {    }    @Override    public void searchGoodsListData(BrandGoodsBean brandGoodsBean) {        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);        imm.hideSoftInputFromWindow(gooodNameEt.getWindowToken(), 0);        if (brandGoodsBean.getTotal() == 0) {            banner.setVisibility(View.GONE);            bannerRl.setVisibility(View.GONE);            rightpageImg.setVisibility(View.GONE);            leftpageImg.setVisibility(View.GONE);            hintLayout.setVisibility(View.VISIBLE);            recycler.setVisibility(View.VISIBLE);            recyclerRl.setVisibility(View.VISIBLE);            nodataHintTv.setText(String.format(NO_DATA_HINT_FORMAT, gooodNameEt.getText().toString()));            titleTv.setText(NO_DATA_TITLE);            defaultList.clear();            for (int i = 0; i < brandGoodsBean.getList().size(); i++) {                defaultList.add(mPresenter.getGoodsBean(brandGoodsBean.getList(), i));            }            adapter.addDatas(defaultList);        } else {            recycler.setVisibility(View.GONE);            recyclerRl.setVisibility(View.GONE);            hintLayout.setVisibility(View.GONE);            banner.setVisibility(View.VISIBLE);            bannerRl.setVisibility(View.VISIBLE);            titleTv.setText(String.format(GOODS_NUM_FORMAT, brandGoodsBean.getList().size()));            lists = mPresenter.handerBrandGoodsData(brandGoodsBean.getList());            if (lists.size() > 1) {                rightpageImg.setVisibility(View.VISIBLE);                leftpageImg.setVisibility(View.VISIBLE);            } else {                rightpageImg.setVisibility(View.GONE);                leftpageImg.setVisibility(View.GONE);            }            banner.update(lists);        }    }    @OnClick({R.id.delete_img, R.id.search_bt, R.id.back,R.id.rightpage_img,R.id.leftpage_img})    public void onClick(View view) {        switch (view.getId()) {            case R.id.delete_img:                gooodNameEt.setText("");                break;            case R.id.search_bt:                if (TextUtils.isEmpty(gooodNameEt.getText())) {                    Toast.getInstance().toast(this, "搜索内容不能为空", 2);                } else {                    mPresenter.searchGoods(gooodNameEt.getText().toString());                }                break;            case R.id.rightpage_img:                if (lists.size() > 0)                    banner.scrollRight();                break;            case R.id.leftpage_img:                if (lists.size() > 0)                    banner.scrollLeft();                break;            case R.id.back:                finish();                break;        }    }}